<?php

namespace App\Services;

use App\Models\User;
use Illuminate\Support\Facades\Log;
use Telegram\Bot\Api;
use Telegram\Bot\Objects\Update;

class TelegramService
{
    protected $telegram;

    public function __construct()
    {
        $this->telegram = new Api(config('services.telegram.bot_token'));
    }

    public function handleWebhook(Update $update)
    {
        try {
            $message = $update->getMessage();
            $chatId = $message->getChat()->getId();
            $text = $message->getText();
            $username = $message->getFrom()->getUsername();

            // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            $user = $this->handleUser($chatId, $username);

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
            if (str_starts_with($text, '/')) {
                return $this->handleCommand($text, $chatId, $user);
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            return $this->handleMessage($text, $chatId, $user);
        } catch (\Exception $e) {
            Log::error('Telegram webhook error: ' . $e->getMessage());
            return $this->telegram->sendMessage([
                'chat_id' => $chatId,
                'text' => '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
            ]);
        }
    }

    protected function handleUser($telegramId, $username)
    {
        $user = User::where('telegram_id', $telegramId)->first();

        if (!$user) {
            $user = User::create([
                'name' => $username,
                'email' => $telegramId . '@telegram.user',
                'password' => bcrypt(str_random(16)),
                'telegram_id' => $telegramId,
                'telegram_username' => $username
            ]);
        }

        return $user;
    }

    protected function handleCommand($text, $chatId, $user)
    {
        $command = explode(' ', $text)[0];

        switch ($command) {
            case '/start':
                return $this->sendWelcomeMessage($chatId);
            case '/help':
                return $this->sendHelpMessage($chatId);
            case '/recipes':
                return $this->handleRecipesCommand($text, $chatId, $user);
            case '/routes':
                return $this->handleRoutesCommand($chatId, $user);
            default:
                return $this->telegram->sendMessage([
                    'chat_id' => $chatId,
                    'text' => '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.'
                ]);
        }
    }

    protected function handleMessage($text, $chatId, $user)
    {
        return $this->telegram->sendMessage([
            'chat_id' => $chatId,
            'text' => '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º. /help - –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.'
        ]);
    }

    protected function sendWelcomeMessage($chatId)
    {
        return $this->telegram->sendMessage([
            'chat_id' => $chatId,
            'text' => '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π! üó∫Ô∏è' . PHP_EOL . PHP_EOL .
                     '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:' . PHP_EOL .
                     '/recipes - –ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤' . PHP_EOL .
                     '/routes - –ü—Ä–æ—Å–º–æ—Ç—Ä –º–∞—Ä—à—Ä—É—Ç–æ–≤' . PHP_EOL .
                     '/help - –ü–æ–º–æ—â—å'
        ]);
    }

    protected function sendHelpMessage($chatId)
    {
        return $this->telegram->sendMessage([
            'chat_id' => $chatId,
            'text' => '–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:' . PHP_EOL . PHP_EOL .
                     '/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º' . PHP_EOL .
                     '/recipes - –ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ —Å—Ç—Ä–∞–Ω–µ –∏–ª–∏ —Ç–µ–≥—É' . PHP_EOL .
                     '/routes - –ü—Ä–æ—Å–º–æ—Ç—Ä –º–∞—Ä—à—Ä—É—Ç–æ–≤' . PHP_EOL .
                     '/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ' . PHP_EOL . PHP_EOL .
                     '–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:' . PHP_EOL .
                     '/recipes –ò—Ç–∞–ª–∏—è - –ø–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–π –∫—É—Ö–Ω–∏' . PHP_EOL .
                     '/recipes #–ø–∞—Å—Ç–∞ - –ø–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤ —Å —Ç–µ–≥–æ–º "–ø–∞—Å—Ç–∞"'
        ]);
    }

    protected function handleRecipesCommand($text, $chatId, $user)
    {
        $searchQuery = trim(substr($text, strlen('/recipes ')));

        if (empty($searchQuery)) {
            return $this->telegram->sendMessage([
                'chat_id' => $chatId,
                'text' => '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –∏–ª–∏ —Ç–µ–≥ –¥–ª—è –ø–æ–∏—Å–∫–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: /recipes –ò—Ç–∞–ª–∏—è –∏–ª–∏ /recipes #–ø–∞—Å—Ç–∞'
            ]);
        }

        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤
        // –ü–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É
        return $this->telegram->sendMessage([
            'chat_id' => $chatId,
            'text' => '–ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É: ' . $searchQuery
        ]);
    }

    protected function handleRoutesCommand($chatId, $user)
    {
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
        // –ü–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É
        return $this->telegram->sendMessage([
            'chat_id' => $chatId,
            'text' => '–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –±—É–¥–µ—Ç –∑–¥–µ—Å—å'
        ]);
    }
} 